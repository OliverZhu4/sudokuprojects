#lang racket

(provide get-board-from-file)
(provide print-board)
(provide get-value)
(provide set-value)
(provide test-checkpoint-code)
(provide solve-sudoku)

; Name:
; VUnetID:
; Email:
; Course: CS 3270 - Vanderbilt University
; Date:
; Honor Stetement:

; Description:


; Define some global constants.
(define BOARD-SIZE 9)       ; The size of the board.
(define ROWS 9)             ; The number of rows.
(define COLS 9)             ; The number of columns.
(define GRID-SIZE 3)        ; The size of a subgrid.


; Specify default file to load puzzle from.
(define default-file-location
  (build-path 'up "txt" "sudoku-test1.txt"))


; Entry point to the sudoku solver with textual output.
; Times the solution function.
;
; This function accepts zero or one parameter.
;
; Calling just (run-sodoku) will run the Sudoku solver on the 
; default puzzle in sudoku-test1.txt in the "txt" directory.
;
; To solve a different puzzle (in a different text file),
; pass the name of the file as a parameter (enclosed with
; double quotes). For example, (run-sudoku "sudoku-test2.txt")
; It is assumed that the file is in the "txt" directory.
;
; @param  args An optional parameter to specify text file to load.
(define (run-sudoku . args)
  (let ([board (if (= (length args) 1)
                   (get-board-from-file (build-path 'up "txt" (car args)))
                   (get-board-from-file default-file-location))])
    (if board
        (begin
          (displayln "")
          (displayln "Puzzle:")
          (displayln "")
          (print-board board)
          (displayln "")
          (let ([solution (time (solve-sudoku board))])
            (if (null? solution)
                (displayln "No solution")
                (begin
                  (displayln "")
                  (displayln "Solution:")
                  (displayln "")
                  (print-board solution)
                  (displayln "")))))
        (displayln "There is no board to process"))))


; Loads a board from the given file.
; It expects the board to be in the format of a single S-expression:
; a list of nine lists, each containing nine numbers.
;
; @param  file-location The location of file to load.
(define (get-board-from-file file-location)
  (let ([in (open-input-file file-location #:mode 'text)])
    (read in)))
    

; Prints a board.
;
; @param  board The board to print.
(define (print-board board)
  (begin
    (print-row (list-ref board 0))
    (print-row (list-ref board 1))
    (print-row (list-ref board 2))
    (printf "------+-------+------ ~n")
    (print-row (list-ref board 3))
    (print-row (list-ref board 4))
    (print-row (list-ref board 5))
    (printf "------+-------+------ ~n")
    (print-row (list-ref board 6))
    (print-row (list-ref board 7))
    (print-row (list-ref board 8))))


; Print a row of the board with dividing lines.
;
; @param  row The row of the board to print.
(define (print-row row)
  (printf "~a ~a ~a | ~a ~a ~a | ~a ~a ~a ~n"
          (list-ref row 0)
          (list-ref row 1)
          (list-ref row 2)
          (list-ref row 3)
          (list-ref row 4)
          (list-ref row 5)
          (list-ref row 6)
          (list-ref row 7)
          (list-ref row 8)))


; Returns the value on the board at a specified row and column.
;
; @param  board The board where the value is located.
; @param  row   The row of the value.
; @param  col   The column of the value.
; @return The value at row and col of board.
(define (get-value board row col)
  (list-ref (list-ref board row) col))

  
; Places a given value in the specified row and column and
; return the new board.
; Note: non-destructive! It returns a new board.
;
; @param  board The initial board that will be added value.
; @param  row   The row of the value.
; @param  col   The column of the value.
; @param  num   The number to set on the board.
; @return A new copy of the board where value is placed at row and col.
(define (set-value board row col num)
  (list-set board row (list-set (list-ref board row) col num)))


; Returns the result of checking if a value can be placed at
; a specific row and column on a board.
;
; It is your job to call your implemented "checker" functions
; from this function so it can be tested for the checkpoint
; requirements.
;
; DO NOT change the name/signature of this function, as our
; testing script depends upon it.
;
; @param  board The board to check.
; @param  row   The row where the value will be placed.
; @param  col   The column where the value will be placed.
; @param  num   The number to be placed.
; @return Whether value can be placed at row and col in board.
(define (test-checkpoint-code board row col num)
  ; Your job to call your checker function(s).
  null)


; This function should call your recursive backtracking solver
; and, depending upon the result, either return the solved puzzle
; or return null if the puzzle has no solution.
;
; It is your job to write this and necessary helper functions.
;
; DO NOT change the name/signature of this function, as our
; testing script depends upon it.
;
(define (solve-sudoku board)
  ; Your job to write this.
  null ; Replace this line with your code.
)


; Add your other functions here.